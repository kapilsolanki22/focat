name: MICA & GRPC Cert Expiry Check

on:
  workflow_dispatch:  # Allows manual trigger
  schedule:
  - cron: "41 5 * * 1,4"  # Runs daily at 11:30 PM




  
     # ------------- COMBINED SECRET ------------- # 
jobs:
  fetch-and-check-stage:
    runs-on: ubuntu-latest
    env:
      EXPIRY_THRESHOLD_DAYS: 31  # Set the expiry threshold to 30 days
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth (Stage)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGE }}

      - name: Setting up Cloud SDK (Stage)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}

      - name: Fetch Certificate from Google Secrets Manager (Stage)
        run: |
          gcloud secrets versions access latest --secret="${{ secrets.GCLOUD_SECRET_NAME_STAGE }}" --project="${{ secrets.GCP_PROJECT_ID_STAGE }}" > /tmp/gcp_certificate_base64.crt
          cat /tmp/gcp_certificate_base64.crt | base64 -d > /tmp/gcp_certificate.crt
      - name: Check certificate expiry and details (Stage)
        id: check_expiry_gsm
        run: |
          # Extract expiry date
          EXPIRY_DATE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -enddate | cut -d= -f2)
          EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          THRESHOLD_TIMESTAMP=$(($CURRENT_TIMESTAMP + ${EXPIRY_THRESHOLD_DAYS}*24*60*60))
          
          # Calculate days remaining
          DAYS_REMAINING=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
          
          # Extract DNS name (from SAN if available, otherwise from CN)
          DNS_NAME_STAGE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -ext subjectAltName | grep -o 'DNS:[^,]*' | cut -d: -f2 | head -n1)
          if [ -z "$DNS_NAME_STAGE" ]; then
            DNS_NAME_STAGE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -subject | sed -n '/CN/s/^.*CN=//p')
          fi
          
          echo "Expiry Date: $EXPIRY_DATE" && \
          echo "Expiry Timestamp: $EXPIRY_TIMESTAMP" && \
          echo "Current Timestamp: $CURRENT_TIMESTAMP" && \
          echo "Threshold Timestamp: $THRESHOLD_TIMESTAMP" && \
          echo "Days Remaining: $DAYS_REMAINING"
          
          # Set environment variables for Slack message
          echo "STAGE_CERT_NAME=Mica Client Cert (Stage)" >> $GITHUB_ENV
          echo "STAGE_DNS_NAME=$DNS_NAME_STAGE" >> $GITHUB_ENV
          echo "STAGE_DAYS_REMAINING=$DAYS_REMAINING" >> $GITHUB_ENV
          echo "STAGE_EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
          
          # Determine expiration status
          if [ "$EXPIRY_TIMESTAMP" -le "$THRESHOLD_TIMESTAMP" ]; then
            echo "STAGE_EXPIRING=true" >> $GITHUB_ENV
          else
            echo "STAGE_EXPIRING=false" >> $GITHUB_ENV
          fi
      - name: Send alert to Slack (Stage)
        if: ${{ env.STAGE_EXPIRING == 'true' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "*MICA GRPC STAGE* \n*DNS Name*: '"$STAGE_DNS_NAME"' \n*Days Remaining*: '"$STAGE_DAYS_REMAINING"' \n*End Date*: '"$STAGE_EXPIRY_DATE"'"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}
      # ----- Send Slack Notification on Failure
      - name: Slack Notification on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: custom
          author_name: "MICA GRPC STAGE FAILED"
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*MICA GRPC STAGE FAILED*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please investigate the issue."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}







      # --- VT_STAGE ENVIRONMENT ---

  fetch-and-check-vt-stage:
    runs-on: ubuntu-latest
    env:
      EXPIRY_THRESHOLD_DAYS: 31  # Set the expiry threshold to 30 days
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth (Stage)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_VT_STAGE }}

      - name: Setting up Cloud SDK (Stage)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_VT_STAGE }}

      - name: Fetch Certificate from Google Secrets Manager (Stage)
        run: |
          
          gcloud secrets versions access latest --secret="${{ secrets.GCLOUD_SECRET_NAME_VT_STAGE }}" --project="${{ secrets.GCP_PROJECT_ID_VT_STAGE }}" > /tmp/gcp_certificate.crt

      - name: Check certificate expiry and details (Stage)
        id: check_expiry_gsm
        run: |
          # Extract expiry date
          EXPIRY_DATE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -enddate | cut -d= -f2)
          EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          THRESHOLD_TIMESTAMP=$(($CURRENT_TIMESTAMP + ${EXPIRY_THRESHOLD_DAYS}*24*60*60))
          
          # Calculate days remaining
          DAYS_REMAINING=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
          
          # Extract DNS name (from SAN if available, otherwise from CN)
          DNS_NAME_STAGE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -ext subjectAltName | grep -o 'DNS:[^,]*' | cut -d: -f2 | head -n1)
          if [ -z "$DNS_NAME_STAGE" ]; then
            DNS_NAME_STAGE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -subject | sed -n '/CN/s/^.*CN=//p')
          fi
          
          echo "Expiry Date: $EXPIRY_DATE" && \
          echo "Expiry Timestamp: $EXPIRY_TIMESTAMP" && \
          echo "Current Timestamp: $CURRENT_TIMESTAMP" && \
          echo "Threshold Timestamp: $THRESHOLD_TIMESTAMP" && \
          echo "Days Remaining: $DAYS_REMAINING"
          
          # Set environment variables for Slack message
          echo "STAGE_CERT_NAME=Mica Client Cert (Stage)" >> $GITHUB_ENV
          echo "STAGE_DNS_NAME=$DNS_NAME_STAGE" >> $GITHUB_ENV
          echo "STAGE_DAYS_REMAINING=$DAYS_REMAINING" >> $GITHUB_ENV
          echo "STAGE_EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
          
          # Determine expiration status
          if [ "$EXPIRY_TIMESTAMP" -le "$THRESHOLD_TIMESTAMP" ]; then
            echo "STAGE_EXPIRING=true" >> $GITHUB_ENV
          else
            echo "STAGE_EXPIRING=false" >> $GITHUB_ENV
          fi

      - name: Send alert to Slack (Stage)
        if: ${{ env.STAGE_EXPIRING == 'true' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "*Gateway venu bank Stage* \n*DNS Name*: '"$STAGE_DNS_NAME"' \n*Days Remaining*: '"$STAGE_DAYS_REMAINING"' \n*End Date*: '"$STAGE_EXPIRY_DATE"'"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}





      ##  ---   VT_PROD ENVIRONMENT ---


  fetch-and-check-vt-prod:
     runs-on: ubuntu-latest
     env:
       EXPIRY_THRESHOLD_DAYS: 31  # Set the expiry threshold to 30 days
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth (Stage)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_VT_PROD }}

      - name: Setting up Cloud SDK (Stage)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_VT_PROD }}

      - name: Fetch Certificate from Google Secrets Manager (Stage)
        run: |
          
          gcloud secrets versions access latest --secret="${{ secrets.GCLOUD_SECRET_NAME_VT_PROD }}" --project="${{ secrets.GCP_PROJECT_ID_VT_PROD }}" > /tmp/gcp_certificate.crt


      - name: Check certificate expiry and details (Stage)
        id: check_expiry_gsm
        run: |
          # Extract expiry date
          EXPIRY_DATE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -enddate | cut -d= -f2)
          EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          THRESHOLD_TIMESTAMP=$(($CURRENT_TIMESTAMP + ${EXPIRY_THRESHOLD_DAYS}*24*60*60))
          
          # Calculate days remaining
          DAYS_REMAINING=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
          
          # Extract DNS name (from SAN if available, otherwise from CN)
          DNS_NAME_STAGE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -ext subjectAltName | grep -o 'DNS:[^,]*' | cut -d: -f2 | head -n1)
          if [ -z "$DNS_NAME_STAGE" ]; then
            DNS_NAME_STAGE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -subject | sed -n '/CN/s/^.*CN=//p')
          fi
          
          echo "Expiry Date: $EXPIRY_DATE" && \
          echo "Expiry Timestamp: $EXPIRY_TIMESTAMP" && \
          echo "Current Timestamp: $CURRENT_TIMESTAMP" && \
          echo "Threshold Timestamp: $THRESHOLD_TIMESTAMP" && \
          echo "Days Remaining: $DAYS_REMAINING"
          
          # Set environment variables for Slack message
          echo "STAGE_CERT_NAME=Mica Client Cert (Stage)" >> $GITHUB_ENV
          echo "STAGE_DNS_NAME=$DNS_NAME_STAGE" >> $GITHUB_ENV
          echo "STAGE_DAYS_REMAINING=$DAYS_REMAINING" >> $GITHUB_ENV
          echo "STAGE_EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
          
          # Determine expiration status
          if [ "$EXPIRY_TIMESTAMP" -le "$THRESHOLD_TIMESTAMP" ]; then
            echo "STAGE_EXPIRING=true" >> $GITHUB_ENV
          else
            echo "STAGE_EXPIRING=false" >> $GITHUB_ENV
          fi

      - name: Send alert to Slack (Stage)
        if: ${{ env.STAGE_EXPIRING == 'true' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "*Gateway venu bank Prod* \n*DNS Name*: '"$STAGE_DNS_NAME"' \n*Days Remaining*: '"$STAGE_DAYS_REMAINING"' \n*End Date*: '"$STAGE_EXPIRY_DATE"'"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}





      # --- PROD ENVIRONMENT ---


  fetch-and-check-prod:
    runs-on: ubuntu-latest
    env:
      EXPIRY_THRESHOLD_DAYS: 30  # Set the expiry threshold to 30 days
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth (Prod)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Setting up Cloud SDK (Prod)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}

      - name: Fetch Certificate from Google Secrets Manager (Prod)
        run: |
          gcloud secrets versions access latest --secret="${{ secrets.GCLOUD_SECRET_NAME_PROD }}" --project="${{ secrets.GCP_PROJECT_ID_PROD }}" > /tmp/gcp_certificate_base64.crt
          cat /tmp/gcp_certificate_base64.crt | base64 -d > /tmp/gcp_certificate.crt
      - name: Check certificate expiry and details (Prod)
        id: check_expiry_gsm
        run: |
          # Extract expiry date
          EXPIRY_DATE=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -enddate | cut -d= -f2)
          EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          THRESHOLD_TIMESTAMP=$(($CURRENT_TIMESTAMP + ${EXPIRY_THRESHOLD_DAYS}*24*60*60))
          
          # Calculate days remaining
          DAYS_REMAINING=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
          
          # Extract DNS name (from SAN if available, otherwise from CN)
          DNS_NAME=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -ext subjectAltName | grep -o 'DNS:[^,]*' | cut -d: -f2 | head -n1)
          if [ -z "$DNS_NAME" ]; then
            DNS_NAME=$(openssl x509 -in /tmp/gcp_certificate.crt -noout -subject | sed -n '/CN/s/^.*CN=//p')
          fi
          echo "Expiry Date: $EXPIRY_DATE" && \
          echo "Expiry Timestamp: $EXPIRY_TIMESTAMP" && \
          echo "Current Timestamp: $CURRENT_TIMESTAMP" && \
          echo "Threshold Timestamp: $THRESHOLD_TIMESTAMP" && \
          echo "Days Remaining: $DAYS_REMAINING"
          
          # Set environment variables for Slack message
          echo "PROD_CERT_NAME=Mica Client Cert (Prod)" >> $GITHUB_ENV
          echo "PROD_DNS_NAME=$DNS_NAME" >> $GITHUB_ENV
          echo "PROD_DAYS_REMAINING=$DAYS_REMAINING" >> $GITHUB_ENV
          echo "PROD_EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
          
          # Determine expiration status
          if [ "$EXPIRY_TIMESTAMP" -le "$THRESHOLD_TIMESTAMP" ]; then
            echo "PROD_EXPIRING=true" >> $GITHUB_ENV
          else
            echo "PROD_EXPIRING=false" >> $GITHUB_ENV
          fi
      - name: Send alert to Slack (Prod)
        if: ${{ env.PROD_EXPIRING == 'true' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "*MICA GRPC PROD* \n*DNS Name*: '"$PROD_DNS_NAME"' \n*Days Remaining*: '"$PROD_DAYS_REMAINING"' \n*End Date*: '"$PROD_EXPIRY_DATE"'"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL_PRO }}
      # ----- Send Slack Notification on Failure
      - name: Slack Notification on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: custom
          author_name: "MICA GRPC PROD FAILED"
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*MICA GRPC PROD FAILED*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please investigate the issue."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PRO }}

  

     # ------------- COMBINED Kubernetes ------------- # 




  fetch-secrets-STAGE:
      runs-on: ubuntu-latest
      env:
        EXPIRY_THRESHOLD_DAYS: 30  # Set the expiry threshold to 30 days
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
  
        # --- STAGE ENVIRONMENT ---
  
        - name: Google Auth (Stage)
          id: auth_stage
          uses: 'google-github-actions/auth@v2'
          with:
            credentials_json: ${{ secrets.GCP_SA_KEY_STAGE }}
  
        - name: Setting up Cloud SDK (Stage)
          uses: 'google-github-actions/setup-gcloud@v2'
          with:
            project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}
  
        - name: Install gke-gcloud-auth-plugin (Stage)
          run: |
            gcloud components install gke-gcloud-auth-plugin
        - name: Authenticate kubectl (Stage)
          run: |
            gcloud config set project ${{ secrets.GCP_PROJECT_ID_STAGE }}
            gcloud container clusters get-credentials venu-stage-k8s-01 --zone=us-east4 --project ${{ secrets.GCP_PROJECT_ID_STAGE }}
        - name: Fetch certificate from Kubernetes secrets (Stage)
          id: fetch_cert_stage
          run: |
            kubectl get secret mica-secrets -n default -o json | \
            jq -r '.data[".mica-server-cert"] | @base64d' | \
            awk '/-----BEGIN CERTIFICATE-----/{flag=1} flag{print} /-----END CERTIFICATE-----/{flag=0}' > stage_cert.pem
        - name: Check certificate expiry (Stage)
          id: check_expiry_stage
          run: |
            EXPIRY_DATE=$(openssl x509 -in stage_cert.pem -noout -enddate | cut -d= -f2) && \
            EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s) && \
            CURRENT_TIMESTAMP=$(date +%s) && \
            THRESHOLD_TIMESTAMP=$(($CURRENT_TIMESTAMP + 30*24*60*60)) && \
            DAYS_REMAINING=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 )) && \
            echo "Expiry Date: $EXPIRY_DATE" && \
            echo "Expiry Timestamp: $EXPIRY_TIMESTAMP" && \
            echo "Current Timestamp: $CURRENT_TIMESTAMP" && \
            echo "Threshold Timestamp: $THRESHOLD_TIMESTAMP" && \
            echo "Days Remaining: $DAYS_REMAINING"
            
            DNS_NAME=$(openssl x509 -in stage_cert.pem -noout -ext subjectAltName | grep -o 'DNS:[^,]*' | cut -d: -f2 | head -n1)
            if [ -z "$DNS_NAME" ]; then
              DNS_NAME=$(openssl x509 -in stage_cert.pem -noout -subject | sed -n '/CN/s/^.*CN=//p')
            fi
            
            echo "CERT_NAME=Mica Server Cert (Stage)" >> $GITHUB_ENV
            echo "DNS_NAME=$DNS_NAME" >> $GITHUB_ENV
            echo "DAYS_REMAINING=$DAYS_REMAINING" >> $GITHUB_ENV
            echo "EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
            
            if [ "$EXPIRY_TIMESTAMP" -le "$THRESHOLD_TIMESTAMP" ]; then
              echo "expiring=true" >> $GITHUB_ENV
            else
              echo "expiring=false" >> $GITHUB_ENV
            fi
        - name: Send alert to Slack (Stage)
          if: ${{ env.expiring == 'true' }}
          run: |
            curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "*VENU GRPC STAGE* \n*DNS Name*: '"$DNS_NAME"' \n*Days Remaining*: '"$DAYS_REMAINING"' \n*End Date*: '"$EXPIRY_DATE"'"
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}
        # ----- Send Slack Notification on Failure
        - name: Slack Notification on Failure
          if: failure()
          uses: 8398a7/action-slack@v3
          with:
            status: failure
            fields: custom
            author_name: "VENU GRPC STAGE FAILED"
            custom_payload: |
              {
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*VENU GRPC STAGE FAILED*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Please investigate the issue."
                    }
                  }
                ]
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}
  


      # --- PROD ENVIRONMENT ---
      
  fetch-secrets-PROD:
      runs-on: ubuntu-latest
      env:
        EXPIRY_THRESHOLD_DAYS: 30  # Set the expiry threshold to 30 days
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
  
        - name: Google Auth (Prod)
          id: auth_prod
          uses: 'google-github-actions/auth@v2'
          with:
            credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
  
        - name: Setting up Cloud SDK (Prod)
          uses: 'google-github-actions/setup-gcloud@v2'
          with:
            project_id: ${{ secrets.GCP_PROJECT_ID_PROD }}
  
        - name: Install gke-gcloud-auth-plugin (Prod)
          run: |
            gcloud components install gke-gcloud-auth-plugin
        - name: Authenticate kubectl (Prod)
          run: |
            gcloud config set project ${{ secrets.GCP_PROJECT_ID_PROD }}
            gcloud container clusters get-credentials venu-prod-k8s --zone=us-east4 --project ${{ secrets.GCP_PROJECT_ID_PROD }}
        - name: Fetch certificate from Kubernetes secrets (Prod)
          id: fetch_cert_prod
          run: |
            kubectl get secret mica-secrets -n default -o json | \
            jq -r '.data[".mica-server-cert"] | @base64d' | \
            awk '/-----BEGIN CERTIFICATE-----/{flag=1} flag{print} /-----END CERTIFICATE-----/{flag=0}' > prod_cert.pem
        - name: Check certificate expiry (Prod)
          id: check_expiry_prod
          run: |
            EXPIRY_DATE=$(openssl x509 -in prod_cert.pem -noout -enddate | cut -d= -f2) && \
            EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s) && \
            CURRENT_TIMESTAMP=$(date +%s) && \
            THRESHOLD_TIMESTAMP=$(($CURRENT_TIMESTAMP + 30*24*60*60)) && \
            DAYS_REMAINING=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 )) && \
            echo "Expiry Date: $EXPIRY_DATE" && \
            echo "Expiry Timestamp: $EXPIRY_TIMESTAMP" && \
            echo "Current Timestamp: $CURRENT_TIMESTAMP" && \
            echo "Threshold Timestamp: $THRESHOLD_TIMESTAMP" && \
            echo "Days Remaining: $DAYS_REMAINING"
            
            DNS_NAME=$(openssl x509 -in prod_cert.pem -noout -ext subjectAltName | grep -o 'DNS:[^,]*' | cut -d: -f2 | head -n1)
            if [ -z "$DNS_NAME" ]; then
              DNS_NAME=$(openssl x509 -in prod_cert.pem -noout -subject | sed -n '/CN/s/^.*CN=//p')
            fi
            
            echo "CERT_NAME=Mica Server Cert (Prod)" >> $GITHUB_ENV
            echo "DNS_NAME=$DNS_NAME" >> $GITHUB_ENV
            echo "DAYS_REMAINING=$DAYS_REMAINING" >> $GITHUB_ENV
            echo "EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
            
            if [ "$EXPIRY_TIMESTAMP" -le "$THRESHOLD_TIMESTAMP" ]; then
              echo "expiring=true" >> $GITHUB_ENV
            else
              echo "expiring=false" >> $GITHUB_ENV
            fi
        - name: Send alert to Slack (PROD)
          if: ${{ env.expiring == 'true' }}
          run: |
            curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "*VENU GRPC PROD* \n*DNS Name*: '"$DNS_NAME"' \n*Days Remaining*: '"$DAYS_REMAINING"' \n*End Date*: '"$EXPIRY_DATE"'"
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL_PRO }}
        # ----- Send Slack Notification on Failure
        - name: Slack Notification on Failure
          if: failure()
          uses: 8398a7/action-slack@v3
          with:
            status: failure
            fields: custom
            author_name: "VENU GRPC PROD FAILED"
            custom_payload: |
              {
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*VENU GRPC PROD FAILED*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Please investigate the issue."
                    }
                  }
                ]
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PRO }}
